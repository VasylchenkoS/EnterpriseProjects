package com.vasylchenko.testbeans;

/*Семафоры отлично подходят для решения задач, где надо ограничивать доступ.
Например, классическая задача про обедающих философов.
Ее суть: есть несколько философов, но за круглым столом находится только пять тарелок и пять вилок.
И надо, чтобы все философы пообедали, но при этом не возникло взаимоблокировки философами друг друга
в борьбе за тарелку и вилку. В итоге только два философа смогут одновременно находиться за столом,
а другие будут ждать*/

import com.vasylchenko.java.sources.SemaphoreImpl;

public class Philosopher implements Runnable {
    SemaphoreImpl sem; // семафор. ограничивающий число философов
    // кол-во приемов пищи
    int num = 0;
    // условный номер философа
    int id;

    // в качестве параметров конструктора передаем идентификатор философа и семафор
    public Philosopher(SemaphoreImpl sem, int id) {
        this.sem = sem;
        this.id = id;
    }

    public void run() {
        try {
            while (num < 3)// пока количество приемов пищи не достигнет 3
            {
                //Запрашиваем у семафора разрешение на выполнение
                sem.acquire();
                System.out.println("Философ " + id + " садится за стол");
                // философ ест
                Thread.sleep(500);
                num++;
                System.out.println("Философ " + id + " выходит из-за стола");
                sem.release();
                // философ гуляет
                Thread.sleep(500);
            }
        } catch (InterruptedException e) {
            System.out.println("у философа " + id + " проблемы со здоровьем");
        }
    }
}